查找
在java中， 我们常用的查找有两种：
1.顺序查找找【二分法，我们放在算法讲解】
2.二分查找
案例
1.有一个数列：白眉鹰王，金毛狮王，紫衫龙王，青翼斧王猜数游戏：从键盘中任意输入一个名称，判断数列中是否包含此名称【顺序查找】要求： 如果找到了，就提示找到，并给出下标值。
2.请对一个有序数值进行二分查找{1，8，10，89，1000，1234}，输入一个数看看该数值是否存在此数，并且求出下标，如果没有就提示“没有这个数


sequence顺序”

class search{

	public static void main(String[] args) {
		 //sequence
		/*1.有一个数列：白眉鹰王，金毛狮王，紫衫龙王，青翼斧王猜数游戏：从
		键盘中任意输入一个名称，判断数列中是否包含此名称【顺序查找】要求： 
		如果找到了，就提示找到，并给出下标值。
		2.请对一个有序数值进行二分查找{1，8，10，89，1000，1234}，
		输入一个数看看该数值是否存在此数，并且求出下标，如果没有就提示“没有这个数"
         思路分析
         1.定义一个字符串数组
         2.接收用户输入，遍历数组，逐一比较，如果有，则提示信息，并退出
		*/
//定义一个数组
         String []names= {"白眉鹰王"，"白眉鹰王"，"金毛狮王"，"紫衫龙王","青翼斧王"}
         Scanner myScanner = new Scanner(System.in);
         String.out.println("请输入名字");
         String findName = myScanner.next();
         //遍历数组，逐一比较，如果有，则提示信息，并退出
         //这里老师给大家一个编程思想/技巧，一个经典的方法
         int index = -1;
         for(int i = 0; i < names.length; i++){
         	 //比较 字符串比较 equals， 如果要找到名字就是当前元素
         	if(findName.equals(names[i])){
               System.out.println("恭喜你找到" + findName);
               System.out.println("下标为=" + i);
                index = i;//i存储到index
                break;
         	}
         }
         if (index == -1){//没有找到
         	System.out.println("sorry,没有找到"+ findName)
         }
	}
}



多维数组-二维数组
多维数组我们只介绍二维数组
二维数组的应用场景
比如我们开发一个五子棋游戏， 棋盘就是需要二维数组来表示 
请用二维数组输出如下图形
000000
001000
020300
000000
dimentional 维度


class dimentional{
	public static void main(String[] args) {
		

		/*
           请用而为数值输出如下图形
             000000
             001000
             020300
             000000

             */

int[][]arr = {{0,0,0,0,0,0},
			 {0,0,1,0,0,0},
			 {0,2,0,3,0,0},
			 {0,0,0,0,0,0}};
//原来的一维 数组的每个元素是一维数组，就构成二维数组
//输出二维图形
for (int i =0;i < arr.length ;i++ ) {//遍历二维数组的每个元素
	//arr[i].length 得到 对应的每个一维数组的长度
	//arr[i]表示二维数组的第i+i个元素 比如arr[0]:二维数组的第一个元素
	for (int j = 0;j <arr[i].length ;j++ ){
		System.out.print(arr[i][j]+"\t");//输出了一堆数组
	}
	System.out.println(" ");
}



	\
	}
}
二维数组的使用
语法：类型【】【】数组名=new 类型【】【】
比如： int a[][]=new int [2][3]
 二维数组的使用
使用方式2：动态初始化
1）先声明：类型 数组名【】【】
2）再定义（开辟空间）数组名= new类型【大小】【大小】
class dimentional1{
public static void main(String[] args) {
	int arr[][];
	arr = new int [2][2];
	//遍历arr数组
	for (int i = 0;i < arr.length ;i++ ) {
		for (int j = 0; j < arr[i].length;j++ ) {
			System.out.print(arr[i][j] +" ");
		}
		

		
	}System.out.println(" ");//换行
}
}








3）赋值（有默认值，比如int 类型的就是0）
4）使用演示
使用方式3：动态初始化- 列数不确定
1）看一个需求：动态创建下面二维数组，并输出。
1  
22
333
完成该案例
画出执行分析示意图

class dimentional1{
public static void main(String[] args) {
	int arr[][]= new int [6][6];
	for (int i=0;i< arr.length-1;i++ ) { 
                 
                arr[i] = new int [i+1];//new int []代表空间这里表示空间从1到i+1逐步增加

		for (int j =0;j < arr[i].length;j++ ) {
			        arr[i][j]= i+1;//把所有数组+1

		}     
		
	}
	for (int i= 0;i < arr.length-1 ;i++ ) {//arr.length 表示{}里面的{{}{}{}....个数}
		for (int j =0; j<arr[i].length; j++) {//arr[i].length 表示第i个{}的长度

			System.out.print(arr[i][j]);
		}
		System.out.println(" ");
	}
}
}

二维数组的使用

静态初始化
1.定义 类型数组名[][] ={{值1，值2...},{值1，值2}，{值1，值2..}}
使用
 }


                         1
		1 1
		1 2 1
		1 3 3 1
		1 4 6 4 1
		1 5 10 10 5 1
		1 6 15 20 15 6 1
		1 7 21 35 35 21 7 1
		1 8 28 56 70 56 28 8 1
		1 9 36 84 126 126 84 36 9 1
		*/

//使用二维数组打印一个10行杨辉三角
int [][]arr = new int [10][10];
		for (int i = 0;i < arr.length ; i++) {//二维数组
			arr[i] = new int [i + 1];

       
          	
          
			for (int j = 0;j < arr[i].length;j++ ) {//一维数组
				     if (j == 0 || j == arr[i].length - 1) {
				            arr[i][j] = 1;    	
				     }else{
				     	    arr[i][j] = arr[i-1][j] + arr[i-1][j-1];
				     }
				     	System.out.print(arr[i][j]+" ");
				     }
				// arr[0][j] = 1;
				// arr[arr.length][j] = 1;		
				// arr[i][j] = arr[i - 1][j] + arr[i -1][j - 1];
              
System.out.println(" ");
				   
			}

二维数组使用细节和注意事项
1.一维数组的声明方式有
int[] x 或者 int x[]
2.二维数组的声明方式有
int [][]y 或者int[]y[] 或者 int y[][]
3.二维数组实际上是由多个一维数组组成，它的各个一维数组的长度可以相同，也可以不相同。比如：map[][]是一个二维数组
map[][] ={{1,2},{3,4,5}}
由map[0]是一个含有两个元素的一维数组，map[1]是一个含有三个元素的一维数组构成 


思路：本质数组扩容+定位
1.我们先确定 添加数应该插入到哪个索引
2.然后扩容
//已知有个升序的数组，要求插入一个元素，该数组顺序依然是升序，比如：【10，12，45，90】，添加23后，数组为【10，12，23，45，90】






============================
import java.util.Scanner;
class Scratch {
    public static void main(String[] args) {

        int[] arr = {10, 12, 45, 90};
        System.out.println("请输入");
        Scanner myScanner = new Scanner(System.in);
        int import1 = myScanner.nextInt();
          int index = -1;//index就是要插入的位置
//遍历 arr数组， 如果发现 import1 <= arr[i], 说明 i 就是要插入的位置
//使用 index 保留index = i;
//如果遍历完后，没有发现 import1 <= arr[i], 说明 index = arr.length
        for (int i = 0; i < arr.length; i++) {
            if (import1 <= arr[i]) {
                index = i;
                break;//找到位置后，就退出
            }
        }//判断 index 值
        if (index == -1){
            index = arr.length;
        }
        System.out.println(index);
        int[]temp1 = new int[arr.length + 1];
//扩容 大小 arr.length +1
        for (int i= 0,j = 0; i < temp1.length; i++){
           //下面老师准备将arr的元素拷贝到arrNew，并且要跳过 index位置
              if (i != index){
                temp1[i] = arr[j];
                j++;

            }else{
                temp1[i] = import1;
            }

        }arr= temp1;
        for (int j = 0; j <  arr.length; j++) {
            System.out.print(arr[j] + " ");
        }
            for (int a = 0; a <= arr.length ; a++) {
                for (int i = 0; i < arr.length - 1; i++) {






                    if (arr[i] > arr[i+1]) {

                        int temp = arr[i + 1];
                        arr[i + 1] = arr[i];
                        arr[i] = temp;
                    }

                }
            }










    }
}




 import java.util.Scanner;
  class array10{
 public static void main(String[] args) {
   
 /*随机生成10个整数（1——100的范围）保存到数组，
  并倒序打印以及平均值、求最大值和最大值的下标、
  并查找里面是否有 8*/
  int []arr =new int[10];
  for (int i = 0; i < arr.length ;i++ ) {
            arr[i] = (int)(Math.random() * 100) + 1;//生成随机数1-100    
  System.out.print("======"+ arr[i] +"");}

  
       System.out.print("倒序"+ "\n");
       for (int i = arr.length - 1 ; i >= 0 ; i-- ) {
           System.out.print("======"+ arr[i] + "");}
       //平均值、求最大值和最大值的小标
           //我们这里将需要一起完成
           //
           double sum = arr[0];
           int max = arr[0];
           int maxIndex = 0;

           for (int i = 1; i < arr.length ; i++){
                     if (max < arr[i]) {
                         max = arr[i];
                         maxIndex = i;                        
                      } }
                      System.out.print("max=" + max + "maxIndex=" + maxIndex +
                        "averegy=" + (sum/arr.length));
                      //查找数组中是否有8-》顺序查找
                      int findNum = 8;
                      int index = -1;
                      for (int i = 0;i < arr.length ; i++) {
                        System.out.println("找到数" + findNum + "下标" + i);
                        index = i;
                        break;
                      }
                      if (index == -1) {
                             System.out.println(" 没有找到" + findNum);                        
                      }
                            
}
}

 





